[tool.poetry]
name = "auth-microservice"
version = "1.0.0"
description = "FastAPI Authentication Microservice"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = {extras = ["email"], version = "^2.5.0"}
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
sqlalchemy = "^2.0.23"
asyncpg = "^0.29.0"
alembic = "^1.13.0"
psycopg2-binary = "*"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
structlog = "^23.2.0"
prometheus-fastapi-instrumentator = "^6.1.0"
prometheus-client = "^0.19.0"
flake8 = "*"
python-json-logger = "^2.0.7"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
httpx = "^0.25.2"
black = "^23.11.0"
ruff = "^0.1.6"
isort = "^5.12.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
pytest-cov = "^4.1.0"
aiosqlite = "^0.21.0"
requests = "^2.31.0"
types-requests = "^2.32.4.20250809"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["auth", "models", "routers", "schemas", "services"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = false  # Less strict for development
disallow_incomplete_defs = false  # Less strict for development
disallow_untyped_defs = false  # Less strict for development
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # Less strict for development
warn_return_any = false  # Less strict for development
strict_equality = true
show_error_codes = true
ignore_errors = true  # Less strict for development

[[tool.mypy.overrides]]
module = [
    "bcrypt.*",
    "jose.*",
    "passlib.*",
    "sqlalchemy.*",
    "alembic.*",
    "asyncpg.*",
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "A",  # flake8-builtins
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
    "S104",  # possible binding to all interfaces
    "S105",  # possible hardcoded password
    "S106",  # possible hardcoded password passed to function
    "S113",  # requests call without timeout (test files)
    "B904",  # raise without from in except clauses (legacy code)
    "A003",  # class attribute shadowing builtin (SQLAlchemy models)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["S101", "S106", "S311"]
"*test*.py" = ["S101", "S106", "S311"]

[tool.ruff.isort]
known-first-party = ["auth", "models", "routers", "schemas", "services"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=. --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/alembic/*",
    "test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
fail_under = 80
